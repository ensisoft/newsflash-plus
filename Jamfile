#
# README BEFORE YOU START SCREAMING AND BREAKING THINGS !!!
#
# MSVC: /Zc:whchar-t  option was set on in the boost-build\tools\msvc.jam file
#       however this option was not on when I built Qt library. If /Zc:wchar-t is
#       on wchar_t is as a native type instead of a typedef for unsigned short and
#       linking against Qt fails (QString::fromStdWString(...), & QString::FromWCharArray
#
#       open boost-build\tools\msvc.jam and edit the /Zc:wchar_t line to /Zc:wchar_t-
#
#       Qt was built without debug libraries but when a debug version of this release
#       is built boost.build expects debug versions of qtlibs (i.e. QtCored4.dll).
#       -> copy+rename qt libs
#
#
# qt4.jam: qt4.jam file turns on QT_NO_DEBUG flag. I have commented this out in /usr/share/boost-build/qt4.jam
#
#
# Other notes:
#
# Moving Qt from it's installation folder will break the installation. Don't do that.
#
# Boost 1.51.0 generates a lof of mundane warnings about ununsed typedefs. the -Wno-unused-typedefs
# doesn't cascade from here to the boost targets. This flag is added to boost_1_51_0/Jamroot
#
import os ;
import path ;
import qt ;
import testing ;

# set these paths to to point to the relevant SDK locations.
path-constant QT_PATH       : "third_party/qt-4.8.6" ;
path-constant BOOST_PATH    : "third_party/boost_1_51_0" ;
path-constant OPENSSL_PATH  : "third_party/openssl/sdk/" ;
path-constant PROTOBUF_PATH : "third_party/protobuf/src/" ;

using qt : $(QT_PATH) ;

# bring stuff into scope so that it's usable in subprojects

use-project /boost/ : $(BOOST_PATH) ;
#use-project engine  : "engine" ;

project newsflash
:
  requirements
    <include>.
    <include>gui
    <include>third_party/qjson/include/
    <include>third_party/
    <include>$(OPENSSL_PATH)/include
    <include>$(QT_PATH)/include/QtCore
    <include>$(QT_PATH)/include
    <include>$(BOOST_PATH)
    <include>$(PROTOBUF_PATH)

    <threading>multi

    <toolset>gcc:<cflags>-std=c++11
    <toolset>gcc:<cflags>-Wno-unused-local-typedefs
    <toolset>clang:<cflags>-std=c++11

    # if this is not defined linking problems ensue on msvc
    <define>BOOST_ALL_NO_LIB

    # enable checked iterators on gcc.
    # this is a debug flag and unfortunately has some
    # side effects such as breaking boost.regex.
    #<toolset>gcc:<cflags>-D_GLIBCXX_DEBUG


    # we need -rdynamic for backtrace and backtrace_symbols
    # in order to dump a stacktrace from the assert
    # todo: whats the flag for clang??
    <toolset>gcc:<linkflags>-rdynamic

    # https://msdn.microsoft.com/en-us/library/fcc1zstk.aspx
    #
    # this option is needed starting with msvc2012(?)
    # to allow the binary run on WinXP.
    # note that it seems to be enough to have this on the executable.
    # so theres no need to dick around with Qt, json, zlib settings.
    # WINDOWS, creates a win32 application that uses WinMain, no console.
    # CONSOLE, creates a console application that uses main(), system created console.
    #<toolset>msvc:<linkflags>/SUBSYSTEM:WINDOWS,5.01

    # https://msdn.microsoft.com/en-us/library/dn502518.aspx
    # https://msdn.microsoft.com/en-us/library/958x11bc.aspx
    #
    # /Zi turns on the .pdb generation. We want this for our release build
    # so that we can do post-mortem debuggin with the generated minidump and pdb.
    # /FS is needed for parallel build, it forces debug data to be written through
    # a serialized a surrogate process.
    # Note that /Zi names the .pdb file as vcx0.pdb where the x is the version number
    # so for example vc120.pdb
    <variant>release,<toolset>msvc:<cflags>/Zi
    <variant>release,<toolset>msvc:<cflags>/FS


    # http://www.wintellect.com/devcenter/jrobbins/correctly-creating-native-c-release-build-pdbs
    # need to tell the linker also about the debug data.
    <variant>release,<toolset>msvc:<linkflags>/DEBUG
    <variant>release,<toolset>msvc:<linkflags>/OPT:REF
    <variant>release,<toolset>msvc:<linkflags>/OPT:ICF

;

## prebuilt third_party libraries

if [ os.name ] = NT
{
  # define openssl libraries, they have different names on win32 vs. linux
  lib openssl : : <name>ssleay32 <search>$(OPENSSL_PATH)/lib ;
  lib crypto  : : <name>libeay32 <search>$(OPENSSL_PATH)/lib ;

  # different iterator debug levels. need to link specifically to debug/release versions.
  lib protobuf : : <variant>debug   <name>libprotobuf <search>"third_party/protobuf/vsprojects/x64/Debug" ;
  lib protobuf : : <variant>release <name>libprotobuf <search>"third_party/protobuf/vsprojects/x64/Release" ;

  # this library is LGPL license, so must use as a shared library
  # instead of statically link it.
  lib qjson : : <variant>release <name>qjson <search>"third_party/qjson/lib/Release" ;
  lib qjson : : <variant>debug   <name>qjson <search>"third_party/qjson/lib/Debug" ;

}

if [ os.name ] = LINUX
{
  # on linux openssl is just *there* (only dev-package needs to be installed)
  # so only got to name the libraries here
  lib openssl : : <name>ssl    <search>$(OPENSSL_PATH)/lib ;
  lib crypto  : : <name>crypto <search>$(OPENSSL_PATH)/lib ;

  # protobuf
  lib protobuf : : <name>protobuf <search>"third_party/protobuf/src/.libs" ;

  # this library is LGPL license, so must use as a shared library
  # instead of statically link it.
  lib qjson  : : <name>qjson <search>"third_party/qjson/lib/" ;

}


# compression library
lib zlib   : : <name>zlib <search>"third_party/zlib/lib" ;

# engine library
lib engine :
    [ glob engine/*.cpp ]
    engine/engine.pb.cc

    /boost//filesystem/<link>static
    /boost//system/<link>static
    /boost//thread/<link>static
    /boost//regex/<link>static
    protobuf/<link>static

    zlib/<link>shared
    openssl/<link>shared
    crypto/<link>shared
:
<link>static
;

# build engine unit tests
unit-test unit_test_utf8               : engine/unit_test/unit_test_utf8.cpp        engine/<link>static ;
unit-test unit_test_uuencode           : engine/unit_test/unit_test_uuencode.cpp    engine/<link>static ;
unit-test unit_test_yenc               : engine/unit_test/unit_test_yenc.cpp        engine/<link>static ;
unit-test unit_test_session            : engine/unit_test/unit_test_session.cpp     engine/<link>static ;
unit-test unit_test_buffer             : engine/unit_test/unit_test_buffer.cpp      engine/<link>static ;
unit-test unit_test_threadpool         : engine/unit_test/unit_test_threadpool.cpp  engine/<link>static ;
unit-test unit_test_event              : engine/unit_test/unit_test_event.cpp       engine/<link>static ;
unit-test unit_test_tcpsocket          : engine/unit_test/unit_test_tcpsocket.cpp   engine/<link>static ;
unit-test unit_test_sslsocket          : engine/unit_test/unit_test_sslsocket.cpp   engine/<link>static ;
unit-test unit_test_listing            : engine/unit_test/unit_test_listing.cpp     engine/<link>static ;
unit-test unit_test_download           : engine/unit_test/unit_test_download.cpp    engine/<link>static ;
unit-test unit_test_update             : engine/unit_test/unit_test_update.cpp      engine/<link>static ;
unit-test unit_test_stringtable        : engine/unit_test/unit_test_stringtable.cpp engine/<link>static ;
unit-test unit_test_datafile           : engine/unit_test/unit_test_datafile.cpp    engine/<link>static ;
unit-test unit_test_catalog            : engine/unit_test/unit_test_catalog.cpp     engine/<link>static ;
unit-test unit_test_index              : engine/unit_test/unit_test_index.cpp       engine/<link>static ;
unit-test unit_test_cmdlist            : engine/unit_test/unit_test_cmdlist.cpp     engine/<link>static ;
unit-test unit_test_nntp               : engine/unit_test/unit_test_nntp.cpp        engine/<link>static ;
unit-test unit_test_linebuffer         : engine/unit_test/unit_test_linebuffer.cpp  engine/<link>static ;
unit-test unit_test_bigfile            : engine/unit_test/unit_test_bigfile.cpp     engine/<link>static ;
unit-test unit_test_filemap            : engine/unit_test/unit_test_filemap.cpp     engine/<link>static ;
unit-test unit_test_filebuf            : engine/unit_test/unit_test_filebuf.cpp     engine/<link>static ;
unit-test unit_test_bodyiter           : engine/unit_test/unit_test_bodyiter.cpp    engine/<link>static ;
unit-test unit_test_decode             : engine/unit_test/unit_test_decode.cpp      engine/<link>static ;
unit-test unit_test_filetype           : engine/unit_test/unit_test_filetype.cpp    engine/<link>static ;
unit-test unit_test_throttle           : engine/unit_test/unit_test_throttle.cpp    engine/<link>static ;
unit-test unit_test_engine             : engine/unit_test/unit_test_engine.cpp      engine/<link>static ;


# this is a dummy server used by some of the test cases.
exe server : engine/unit_test/server.cpp engine/<link>static ;

# in order to run this unit test you must be running the test server
unit-test unit_test_connection         : engine/unit_test/unit_test_connection.cpp  engine/<link>static ;

explicit unit_test_connection ;


exe newsflash :
  [ glob app/*.h       ]
  [ glob app/*.cpp     ]
  [ glob gui/*.ui  ]
  [ glob gui/*.h   ]
  [ glob gui/*.cpp ]

  gui/icon.rc
  gui/resource.qrc
  gui/qtsingleapplication/qtsingleapplication.h
  gui/qtsingleapplication/qtsingleapplication.cpp
  gui/qtsingleapplication/qtlocalpeer.h
  gui/qtsingleapplication/qtlocalpeer.cpp

  tools/keygen/keygen.cpp
  stringlib/string.cpp

  /qt//QtCore
  /qt//QtGui
  /qt//QtNetwork
  /qt//QtXml

  qjson
  engine/<link>static
  :
  # see comments in the project properties.
  <variant>release,<toolset>msvc:<linkflags>/SUBSYSTEM:WINDOWS,5.01
  <variant>debug,<toolset>msvc:<linkflags>/SUBSYSTEM:CONSOLE,5.01
  ;


# build tools

exe join :
  tools/joiner/main.cpp
  /qt//QtCore
  :
  <toolset>msvc:<linkflags>/SUBSYSTEM:CONSOLE,5.01
;

exe keygen :
  tools/keygen/main.cpp
  tools/keygen/keygen.cpp
  app/webengine.cpp
  app/webengine.h
  app/webquery.h
  app/webquery.cpp
  app/debug.cpp
  app/debug.h
  engine/assert.cpp
  /qt//QtCore
  /qt//QtNetwork
  :
  <toolset>msvc:<linkflags>/SUBSYSTEM:CONSOLE,5.01
;

explicit keygen ;


install dist_d : newsflash join
 : <variant>release:<location>dist ;

