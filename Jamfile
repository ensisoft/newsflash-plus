#
# README BEFORE YOU START SCREAMING AND BREAKING THINGS !!!
#
# MSVC: /Zc:whchar-t  option was set on in the boost-build\tools\msvc.jam file
#       however this option was not on when I built Qt library. If /Zc:wchar-t is 
#       on wchar_t is as a native type instead of a typedef for unsigned short and 
#       linking against Qt fails (QString::fromStdWString(...), & QString::FromWCharArray
#       
#       Qt was built without debug libraries but when a debug version of this release
#       is built boost.build expects debug versions of qtlibs (i.e. QtCored4.dll).
#       -> copy+rename qt libs
#
#       
# qt4.jam: qt4.jam file turns on QT_NO_DEBUG flag. I have commented this out in /usr/share/boost-build/qt4.jam
#
# 
# Other notes: 
# 
# Moving Qt from it's installation folder will break the installation. Don't do that.
#
# Boost 1.51.0 generates a lof of mundane warnings about ununsed typedefs. the -Wno-unused-typedefs
# doesn't cascade from here to the boost targets. This flag is added to boost_1_51_0/Jamroot
#
import os ;
import path ;
import qt ;

# set these paths to to point to the relevant SDK locations.
path-constant QT_PATH      : "../qt-4.8.2" ;
path-constant BOOST_PATH   : "../boost_1_51_0" ;
path-constant OPENSSL_PATH : "../openssl_1_0_1f" ;

# debug and release binary paths
path-constant NEWSFLASH_INSTALL_DBG : "bin/debug" ;
path-constant NEWSFLASH_INSTALL_REL : "bin/release" ;

path-constant PLUGIN_DEBUG   : "bin/debug/plugins/" ;
path-constant PLUGIN_RELEASE : "bin/debug/plugins" ;

using qt : $(QT_PATH) ;

# bring stuff into scope so that it's usable in subprojects

use-project /boost/ : $(BOOST_PATH) ;
use-project zlib    : "zlib" ;
use-project corelib : "corelib" ;
use-project engine  : "engine" ;
use-project python  : "python" ;
use-project rss     : "rsslib" ;
use-project nzb     : "nzblib" ;
use-project msglib  : "msglib" ;


# note that we don't set the C++11 flag here cause then it would cascade down to
# python and zlib projects (which would just generate useless warnings)
project newsflash 
: 
  requirements
    <include>qjson/include/
    <include>python/Include/
    <include>../
    <include>.
    <include>$(OPENSSL_PATH)/include    
    <include>$(QT_PATH)/include/QtCore    
    <include>$(QT_PATH)/include    
    <include>$(BOOST_PATH)
    <threading>multi

    <toolset>gcc:<cflags>-std=c++11
    <toolset>clang:<cflags>-std=c++11
    
    # if this is not defined linking problems ensue on msvc
    <define>BOOST_ALL_NO_LIB
;

if [ os.name ] = NT
{
   # define openssl libraries, they have different names on win32 vs. linux
   lib openssl : : <name>ssleay32 <search>$(OPENSSL_PATH)/lib ;
   lib crypto  : : <name>libeay32 <search>$(OPENSSL_PATH)/lib ;
}

if [ os.name ] = LINUX
{
   # on linux openssl is just *there* (only dev-package needs to be installed)
   # so only got to name the libraries here
   lib openssl : : <name>ssl    <search>$(/usr/lib) ;
   lib crypto  : : <name>crypto <search>$(/usr/lib) ; 
}

# this library is LGPL license, so must use as a .so
# instead of statically link it.
lib qjson : : <name>qjson <search>"qjson/lib/" ;

build-project "app" ;
#build-project "python" ;
build-project "media" ;
build-project "unrar" ;
build-project "par2cmdline" ;

if [ os.name ] = LINUX
{
    build-project "tools/launcher" ;
}


## these are Qt plugins that we need.
lib qgif : : <name>qgif <search>$(QT_PATH)"/plugins/imageformats" ;

#install bin : qgif
#: 
#  <variant>debug:<location>$(NEWSFLASH_INSTALL_DBG)"/qt-plugins/imageformats"
#  <variant>release:<location>$(NEWSFLASH_INSTALL_REL)"/qt-plugins/imageformats"
#;

