// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "engine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace data {

namespace {

const ::google::protobuf::Descriptor* File_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  File_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stash_reflection_ = NULL;
const ::google::protobuf::Descriptor* Download_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Download_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Batch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Batch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_engine_2eproto() {
  protobuf_AddDesc_engine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "engine.proto");
  GOOGLE_CHECK(file != NULL);
  File_descriptor_ = file->message_type(0);
  static const int File_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, filepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, dataname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, is_binary_),
  };
  File_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      File_descriptor_,
      File::default_instance_,
      File_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(File));
  Stash_descriptor_ = file->message_type(1);
  static const int Stash_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stash, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stash, data_),
  };
  Stash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stash_descriptor_,
      Stash::default_instance_,
      Stash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stash));
  Download_descriptor_ = file->message_type(2);
  static const int Download_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, article_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, stash_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, num_decode_jobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, num_actions_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, num_actions_ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, stash_),
  };
  Download_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Download_descriptor_,
      Download::default_instance_,
      Download_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Download));
  TaskState_descriptor_ = file->message_type(3);
  static const int TaskState_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, batch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, runtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, data_),
  };
  TaskState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskState_descriptor_,
      TaskState::default_instance_,
      TaskState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskState));
  Batch_descriptor_ = file->message_type(4);
  static const int Batch_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, batch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, byte_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, num_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, num_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, damaged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, completion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, runtime_),
  };
  Batch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Batch_descriptor_,
      Batch::default_instance_,
      Batch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Batch));
  TaskList_descriptor_ = file->message_type(5);
  static const int TaskList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskList, bytes_queued_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskList, bytes_ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskList, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskList, batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskList, tasks_),
  };
  TaskList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskList_descriptor_,
      TaskList::default_instance_,
      TaskList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_engine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    File_descriptor_, &File::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stash_descriptor_, &Stash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Download_descriptor_, &Download::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskState_descriptor_, &TaskState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Batch_descriptor_, &Batch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskList_descriptor_, &TaskList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_engine_2eproto() {
  delete File::default_instance_;
  delete File_reflection_;
  delete Stash::default_instance_;
  delete Stash_reflection_;
  delete Download::default_instance_;
  delete Download_reflection_;
  delete TaskState::default_instance_;
  delete TaskState_reflection_;
  delete Batch::default_instance_;
  delete Batch_reflection_;
  delete TaskList::default_instance_;
  delete TaskList_reflection_;
}

void protobuf_AddDesc_engine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014engine.proto\022\004data\"O\n\004File\022\020\n\010filename"
    "\030\001 \002(\t\022\020\n\010filepath\030\002 \002(\t\022\020\n\010dataname\030\003 \002"
    "(\t\022\021\n\tis_binary\030\004 \002(\010\"\'\n\005Stash\022\020\n\010sequen"
    "ce\030\001 \002(\r\022\014\n\004data\030\002 \002(\014\"\357\001\n\010Download\022\017\n\007a"
    "rticle\030\001 \003(\t\022\r\n\005group\030\002 \003(\t\022\014\n\004path\030\003 \002("
    "\t\022\014\n\004name\030\004 \002(\t\022\022\n\nstash_name\030\005 \002(\t\022\027\n\017n"
    "um_decode_jobs\030\006 \002(\r\022\031\n\021num_actions_tota"
    "l\030\007 \002(\r\022\031\n\021num_actions_ready\030\010 \002(\r\022\016\n\006er"
    "rors\030\t \002(\r\022\030\n\004file\030\n \003(\0132\n.data.File\022\032\n\005"
    "stash\030\013 \003(\0132\013.data.Stash\"\270\001\n\tTaskState\022\017"
    "\n\007task_id\030\001 \002(\r\022\022\n\naccount_id\030\002 \002(\r\022\020\n\010b"
    "atch_id\030\003 \002(\r\022\014\n\004desc\030\004 \002(\t\022\014\n\004path\030\005 \002("
    "\t\022\014\n\004size\030\006 \002(\004\022\014\n\004type\030\007 \002(\r\022\r\n\005state\030\010"
    " \002(\r\022\016\n\006errors\030\t \002(\r\022\017\n\007runtime\030\n \002(\r\022\014\n"
    "\004data\030\013 \002(\014\"\306\001\n\005Batch\022\022\n\naccount_id\030\001 \002("
    "\r\022\020\n\010batch_id\030\002 \002(\r\022\014\n\004path\030\003 \002(\t\022\014\n\004des"
    "c\030\004 \002(\t\022\021\n\tbyte_size\030\005 \002(\004\022\021\n\tnum_tasks\030"
    "\006 \002(\r\022\021\n\tnum_files\030\007 \002(\r\022\017\n\007damaged\030\010 \002("
    "\010\022\022\n\ncompletion\030\t \002(\002\022\014\n\004type\030\n \002(\r\022\017\n\007r"
    "untime\030\013 \002(\r\"\204\001\n\010TaskList\022\024\n\014bytes_queue"
    "d\030\001 \002(\004\022\023\n\013bytes_ready\030\002 \002(\004\022\021\n\tobject_i"
    "d\030\003 \002(\004\022\032\n\005batch\030\004 \003(\0132\013.data.Batch\022\036\n\005t"
    "asks\030\005 \003(\0132\017.data.TaskState", 907);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "engine.proto", &protobuf_RegisterTypes);
  File::default_instance_ = new File();
  Stash::default_instance_ = new Stash();
  Download::default_instance_ = new Download();
  TaskState::default_instance_ = new TaskState();
  Batch::default_instance_ = new Batch();
  TaskList::default_instance_ = new TaskList();
  File::default_instance_->InitAsDefaultInstance();
  Stash::default_instance_->InitAsDefaultInstance();
  Download::default_instance_->InitAsDefaultInstance();
  TaskState::default_instance_->InitAsDefaultInstance();
  Batch::default_instance_->InitAsDefaultInstance();
  TaskList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_engine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_engine_2eproto {
  StaticDescriptorInitializer_engine_2eproto() {
    protobuf_AddDesc_engine_2eproto();
  }
} static_descriptor_initializer_engine_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int File::kFilenameFieldNumber;
const int File::kFilepathFieldNumber;
const int File::kDatanameFieldNumber;
const int File::kIsBinaryFieldNumber;
#endif  // !_MSC_VER

File::File()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.File)
}

void File::InitAsDefaultInstance() {
}

File::File(const File& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.File)
}

void File::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_binary_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

File::~File() {
  // @@protoc_insertion_point(destructor:data.File)
  SharedDtor();
}

void File::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filepath_;
  }
  if (dataname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dataname_;
  }
  if (this != default_instance_) {
  }
}

void File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* File::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return File_descriptor_;
}

const File& File::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

File* File::default_instance_ = NULL;

File* File::New() const {
  return new File;
}

void File::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filepath_->clear();
      }
    }
    if (has_dataname()) {
      if (dataname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dataname_->clear();
      }
    }
    is_binary_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filepath;
        break;
      }

      // required string filepath = 2;
      case 2: {
        if (tag == 18) {
         parse_filepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dataname;
        break;
      }

      // required string dataname = 3;
      case 3: {
        if (tag == 26) {
         parse_dataname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataname().data(), this->dataname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dataname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_binary;
        break;
      }

      // required bool is_binary = 4;
      case 4: {
        if (tag == 32) {
         parse_is_binary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_binary_)));
          set_has_is_binary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.File)
  return false;
#undef DO_
}

void File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.File)
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // required string filepath = 2;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filepath(), output);
  }

  // required string dataname = 3;
  if (has_dataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataname().data(), this->dataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dataname(), output);
  }

  // required bool is_binary = 4;
  if (has_is_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_binary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.File)
}

::google::protobuf::uint8* File::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.File)
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // required string filepath = 2;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filepath(), target);
  }

  // required string dataname = 3;
  if (has_dataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataname().data(), this->dataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dataname(), target);
  }

  // required bool is_binary = 4;
  if (has_is_binary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_binary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.File)
  return target;
}

int File::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required string filepath = 2;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

    // required string dataname = 3;
    if (has_dataname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataname());
    }

    // required bool is_binary = 4;
    if (has_is_binary()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void File::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const File* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const File*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void File::MergeFrom(const File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
    if (from.has_dataname()) {
      set_dataname(from.dataname());
    }
    if (from.has_is_binary()) {
      set_is_binary(from.is_binary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void File::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File::CopyFrom(const File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void File::Swap(File* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(filepath_, other->filepath_);
    std::swap(dataname_, other->dataname_);
    std::swap(is_binary_, other->is_binary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata File::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = File_descriptor_;
  metadata.reflection = File_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stash::kSequenceFieldNumber;
const int Stash::kDataFieldNumber;
#endif  // !_MSC_VER

Stash::Stash()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Stash)
}

void Stash::InitAsDefaultInstance() {
}

Stash::Stash(const Stash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.Stash)
}

void Stash::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stash::~Stash() {
  // @@protoc_insertion_point(destructor:data.Stash)
  SharedDtor();
}

void Stash::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Stash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stash_descriptor_;
}

const Stash& Stash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

Stash* Stash::default_instance_ = NULL;

Stash* Stash::New() const {
  return new Stash;
}

void Stash::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    sequence_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.Stash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sequence = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.Stash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.Stash)
  return false;
#undef DO_
}

void Stash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.Stash)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.Stash)
}

::google::protobuf::uint8* Stash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.Stash)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sequence(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Stash)
  return target;
}

int Stash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stash::MergeFrom(const Stash& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stash::CopyFrom(const Stash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stash::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Stash::Swap(Stash* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stash_descriptor_;
  metadata.reflection = Stash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Download::kArticleFieldNumber;
const int Download::kGroupFieldNumber;
const int Download::kPathFieldNumber;
const int Download::kNameFieldNumber;
const int Download::kStashNameFieldNumber;
const int Download::kNumDecodeJobsFieldNumber;
const int Download::kNumActionsTotalFieldNumber;
const int Download::kNumActionsReadyFieldNumber;
const int Download::kErrorsFieldNumber;
const int Download::kFileFieldNumber;
const int Download::kStashFieldNumber;
#endif  // !_MSC_VER

Download::Download()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Download)
}

void Download::InitAsDefaultInstance() {
}

Download::Download(const Download& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.Download)
}

void Download::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stash_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_decode_jobs_ = 0u;
  num_actions_total_ = 0u;
  num_actions_ready_ = 0u;
  errors_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Download::~Download() {
  // @@protoc_insertion_point(destructor:data.Download)
  SharedDtor();
}

void Download::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (stash_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stash_name_;
  }
  if (this != default_instance_) {
  }
}

void Download::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Download::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Download_descriptor_;
}

const Download& Download::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

Download* Download::default_instance_ = NULL;

Download* Download::New() const {
  return new Download;
}

void Download::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Download*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 252) {
    ZR_(num_decode_jobs_, num_actions_ready_);
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_stash_name()) {
      if (stash_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stash_name_->clear();
      }
    }
  }
  errors_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  article_.Clear();
  group_.Clear();
  file_.Clear();
  stash_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Download::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.Download)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string article = 1;
      case 1: {
        if (tag == 10) {
         parse_article:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_article()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->article(this->article_size() - 1).data(),
            this->article(this->article_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "article");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_article;
        if (input->ExpectTag(18)) goto parse_group;
        break;
      }

      // repeated string group = 2;
      case 2: {
        if (tag == 18) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group(this->group_size() - 1).data(),
            this->group(this->group_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group;
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // required string path = 3;
      case 3: {
        if (tag == 26) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stash_name;
        break;
      }

      // required string stash_name = 5;
      case 5: {
        if (tag == 42) {
         parse_stash_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stash_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stash_name().data(), this->stash_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stash_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_decode_jobs;
        break;
      }

      // required uint32 num_decode_jobs = 6;
      case 6: {
        if (tag == 48) {
         parse_num_decode_jobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_decode_jobs_)));
          set_has_num_decode_jobs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_actions_total;
        break;
      }

      // required uint32 num_actions_total = 7;
      case 7: {
        if (tag == 56) {
         parse_num_actions_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_actions_total_)));
          set_has_num_actions_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_actions_ready;
        break;
      }

      // required uint32 num_actions_ready = 8;
      case 8: {
        if (tag == 64) {
         parse_num_actions_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_actions_ready_)));
          set_has_num_actions_ready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_errors;
        break;
      }

      // required uint32 errors = 9;
      case 9: {
        if (tag == 72) {
         parse_errors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errors_)));
          set_has_errors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_file;
        break;
      }

      // repeated .data.File file = 10;
      case 10: {
        if (tag == 82) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_file;
        if (input->ExpectTag(90)) goto parse_stash;
        break;
      }

      // repeated .data.Stash stash = 11;
      case 11: {
        if (tag == 90) {
         parse_stash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_stash;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.Download)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.Download)
  return false;
#undef DO_
}

void Download::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.Download)
  // repeated string article = 1;
  for (int i = 0; i < this->article_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->article(i).data(), this->article(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "article");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->article(i), output);
  }

  // repeated string group = 2;
  for (int i = 0; i < this->group_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->group(i).data(), this->group(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "group");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->group(i), output);
  }

  // required string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->path(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // required string stash_name = 5;
  if (has_stash_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stash_name().data(), this->stash_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stash_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stash_name(), output);
  }

  // required uint32 num_decode_jobs = 6;
  if (has_num_decode_jobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_decode_jobs(), output);
  }

  // required uint32 num_actions_total = 7;
  if (has_num_actions_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_actions_total(), output);
  }

  // required uint32 num_actions_ready = 8;
  if (has_num_actions_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_actions_ready(), output);
  }

  // required uint32 errors = 9;
  if (has_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->errors(), output);
  }

  // repeated .data.File file = 10;
  for (int i = 0; i < this->file_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->file(i), output);
  }

  // repeated .data.Stash stash = 11;
  for (int i = 0; i < this->stash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->stash(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.Download)
}

::google::protobuf::uint8* Download::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.Download)
  // repeated string article = 1;
  for (int i = 0; i < this->article_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->article(i).data(), this->article(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "article");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->article(i), target);
  }

  // repeated string group = 2;
  for (int i = 0; i < this->group_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group(i).data(), this->group(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->group(i), target);
  }

  // required string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required string stash_name = 5;
  if (has_stash_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stash_name().data(), this->stash_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stash_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stash_name(), target);
  }

  // required uint32 num_decode_jobs = 6;
  if (has_num_decode_jobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_decode_jobs(), target);
  }

  // required uint32 num_actions_total = 7;
  if (has_num_actions_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_actions_total(), target);
  }

  // required uint32 num_actions_ready = 8;
  if (has_num_actions_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_actions_ready(), target);
  }

  // required uint32 errors = 9;
  if (has_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->errors(), target);
  }

  // repeated .data.File file = 10;
  for (int i = 0; i < this->file_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->file(i), target);
  }

  // repeated .data.Stash stash = 11;
  for (int i = 0; i < this->stash_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->stash(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Download)
  return target;
}

int Download::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string stash_name = 5;
    if (has_stash_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stash_name());
    }

    // required uint32 num_decode_jobs = 6;
    if (has_num_decode_jobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_decode_jobs());
    }

    // required uint32 num_actions_total = 7;
    if (has_num_actions_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_actions_total());
    }

    // required uint32 num_actions_ready = 8;
    if (has_num_actions_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_actions_ready());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 errors = 9;
    if (has_errors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errors());
    }

  }
  // repeated string article = 1;
  total_size += 1 * this->article_size();
  for (int i = 0; i < this->article_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->article(i));
  }

  // repeated string group = 2;
  total_size += 1 * this->group_size();
  for (int i = 0; i < this->group_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->group(i));
  }

  // repeated .data.File file = 10;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file(i));
  }

  // repeated .data.Stash stash = 11;
  total_size += 1 * this->stash_size();
  for (int i = 0; i < this->stash_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stash(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Download::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Download* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Download*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Download::MergeFrom(const Download& from) {
  GOOGLE_CHECK_NE(&from, this);
  article_.MergeFrom(from.article_);
  group_.MergeFrom(from.group_);
  file_.MergeFrom(from.file_);
  stash_.MergeFrom(from.stash_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_stash_name()) {
      set_stash_name(from.stash_name());
    }
    if (from.has_num_decode_jobs()) {
      set_num_decode_jobs(from.num_decode_jobs());
    }
    if (from.has_num_actions_total()) {
      set_num_actions_total(from.num_actions_total());
    }
    if (from.has_num_actions_ready()) {
      set_num_actions_ready(from.num_actions_ready());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_errors()) {
      set_errors(from.errors());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Download::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Download::CopyFrom(const Download& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Download::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001fc) != 0x000001fc) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->file())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stash())) return false;
  return true;
}

void Download::Swap(Download* other) {
  if (other != this) {
    article_.Swap(&other->article_);
    group_.Swap(&other->group_);
    std::swap(path_, other->path_);
    std::swap(name_, other->name_);
    std::swap(stash_name_, other->stash_name_);
    std::swap(num_decode_jobs_, other->num_decode_jobs_);
    std::swap(num_actions_total_, other->num_actions_total_);
    std::swap(num_actions_ready_, other->num_actions_ready_);
    std::swap(errors_, other->errors_);
    file_.Swap(&other->file_);
    stash_.Swap(&other->stash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Download::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Download_descriptor_;
  metadata.reflection = Download_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskState::kTaskIdFieldNumber;
const int TaskState::kAccountIdFieldNumber;
const int TaskState::kBatchIdFieldNumber;
const int TaskState::kDescFieldNumber;
const int TaskState::kPathFieldNumber;
const int TaskState::kSizeFieldNumber;
const int TaskState::kTypeFieldNumber;
const int TaskState::kStateFieldNumber;
const int TaskState::kErrorsFieldNumber;
const int TaskState::kRuntimeFieldNumber;
const int TaskState::kDataFieldNumber;
#endif  // !_MSC_VER

TaskState::TaskState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.TaskState)
}

void TaskState::InitAsDefaultInstance() {
}

TaskState::TaskState(const TaskState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.TaskState)
}

void TaskState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  task_id_ = 0u;
  account_id_ = 0u;
  batch_id_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  state_ = 0u;
  errors_ = 0u;
  runtime_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskState::~TaskState() {
  // @@protoc_insertion_point(destructor:data.TaskState)
  SharedDtor();
}

void TaskState::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void TaskState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskState_descriptor_;
}

const TaskState& TaskState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

TaskState* TaskState::default_instance_ = NULL;

TaskState* TaskState::New() const {
  return new TaskState;
}

void TaskState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaskState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(task_id_, account_id_);
    ZR_(batch_id_, state_);
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    errors_ = 0u;
    runtime_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.TaskState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // required uint32 account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_batch_id;
        break;
      }

      // required uint32 batch_id = 3;
      case 3: {
        if (tag == 24) {
         parse_batch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_id_)));
          set_has_batch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }

      // required string desc = 4;
      case 4: {
        if (tag == 34) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_path;
        break;
      }

      // required string path = 5;
      case 5: {
        if (tag == 42) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_size;
        break;
      }

      // required uint64 size = 6;
      case 6: {
        if (tag == 48) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // required uint32 type = 7;
      case 7: {
        if (tag == 56) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // required uint32 state = 8;
      case 8: {
        if (tag == 64) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_errors;
        break;
      }

      // required uint32 errors = 9;
      case 9: {
        if (tag == 72) {
         parse_errors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errors_)));
          set_has_errors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_runtime;
        break;
      }

      // required uint32 runtime = 10;
      case 10: {
        if (tag == 80) {
         parse_runtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runtime_)));
          set_has_runtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_data;
        break;
      }

      // required bytes data = 11;
      case 11: {
        if (tag == 90) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.TaskState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.TaskState)
  return false;
#undef DO_
}

void TaskState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.TaskState)
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  // required uint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // required uint32 batch_id = 3;
  if (has_batch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->batch_id(), output);
  }

  // required string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->desc(), output);
  }

  // required string path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->path(), output);
  }

  // required uint64 size = 6;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->size(), output);
  }

  // required uint32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->type(), output);
  }

  // required uint32 state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->state(), output);
  }

  // required uint32 errors = 9;
  if (has_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->errors(), output);
  }

  // required uint32 runtime = 10;
  if (has_runtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->runtime(), output);
  }

  // required bytes data = 11;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.TaskState)
}

::google::protobuf::uint8* TaskState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.TaskState)
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  // required uint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // required uint32 batch_id = 3;
  if (has_batch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->batch_id(), target);
  }

  // required string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  // required string path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->path(), target);
  }

  // required uint64 size = 6;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->size(), target);
  }

  // required uint32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->type(), target);
  }

  // required uint32 state = 8;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->state(), target);
  }

  // required uint32 errors = 9;
  if (has_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->errors(), target);
  }

  // required uint32 runtime = 10;
  if (has_runtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->runtime(), target);
  }

  // required bytes data = 11;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.TaskState)
  return target;
}

int TaskState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // required uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // required uint32 batch_id = 3;
    if (has_batch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_id());
    }

    // required string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required string path = 5;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required uint64 size = 6;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // required uint32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 errors = 9;
    if (has_errors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errors());
    }

    // required uint32 runtime = 10;
    if (has_runtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runtime());
    }

    // required bytes data = 11;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskState::MergeFrom(const TaskState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_batch_id()) {
      set_batch_id(from.batch_id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_errors()) {
      set_errors(from.errors());
    }
    if (from.has_runtime()) {
      set_runtime(from.runtime());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskState::CopyFrom(const TaskState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskState::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void TaskState::Swap(TaskState* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(batch_id_, other->batch_id_);
    std::swap(desc_, other->desc_);
    std::swap(path_, other->path_);
    std::swap(size_, other->size_);
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(errors_, other->errors_);
    std::swap(runtime_, other->runtime_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskState_descriptor_;
  metadata.reflection = TaskState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Batch::kAccountIdFieldNumber;
const int Batch::kBatchIdFieldNumber;
const int Batch::kPathFieldNumber;
const int Batch::kDescFieldNumber;
const int Batch::kByteSizeFieldNumber;
const int Batch::kNumTasksFieldNumber;
const int Batch::kNumFilesFieldNumber;
const int Batch::kDamagedFieldNumber;
const int Batch::kCompletionFieldNumber;
const int Batch::kTypeFieldNumber;
const int Batch::kRuntimeFieldNumber;
#endif  // !_MSC_VER

Batch::Batch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Batch)
}

void Batch::InitAsDefaultInstance() {
}

Batch::Batch(const Batch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.Batch)
}

void Batch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = 0u;
  batch_id_ = 0u;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  byte_size_ = GOOGLE_ULONGLONG(0);
  num_tasks_ = 0u;
  num_files_ = 0u;
  damaged_ = false;
  completion_ = 0;
  type_ = 0u;
  runtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Batch::~Batch() {
  // @@protoc_insertion_point(destructor:data.Batch)
  SharedDtor();
}

void Batch::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void Batch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Batch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Batch_descriptor_;
}

const Batch& Batch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

Batch* Batch::default_instance_ = NULL;

Batch* Batch::New() const {
  return new Batch;
}

void Batch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Batch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(account_id_, batch_id_);
    ZR_(byte_size_, damaged_);
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }
  ZR_(completion_, runtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Batch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.Batch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_batch_id;
        break;
      }

      // required uint32 batch_id = 2;
      case 2: {
        if (tag == 16) {
         parse_batch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_id_)));
          set_has_batch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // required string path = 3;
      case 3: {
        if (tag == 26) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }

      // required string desc = 4;
      case 4: {
        if (tag == 34) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_byte_size;
        break;
      }

      // required uint64 byte_size = 5;
      case 5: {
        if (tag == 40) {
         parse_byte_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &byte_size_)));
          set_has_byte_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_tasks;
        break;
      }

      // required uint32 num_tasks = 6;
      case 6: {
        if (tag == 48) {
         parse_num_tasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_tasks_)));
          set_has_num_tasks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_files;
        break;
      }

      // required uint32 num_files = 7;
      case 7: {
        if (tag == 56) {
         parse_num_files:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_files_)));
          set_has_num_files();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_damaged;
        break;
      }

      // required bool damaged = 8;
      case 8: {
        if (tag == 64) {
         parse_damaged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &damaged_)));
          set_has_damaged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_completion;
        break;
      }

      // required float completion = 9;
      case 9: {
        if (tag == 77) {
         parse_completion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &completion_)));
          set_has_completion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // required uint32 type = 10;
      case 10: {
        if (tag == 80) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_runtime;
        break;
      }

      // required uint32 runtime = 11;
      case 11: {
        if (tag == 88) {
         parse_runtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runtime_)));
          set_has_runtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.Batch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.Batch)
  return false;
#undef DO_
}

void Batch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.Batch)
  // required uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // required uint32 batch_id = 2;
  if (has_batch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->batch_id(), output);
  }

  // required string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->path(), output);
  }

  // required string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->desc(), output);
  }

  // required uint64 byte_size = 5;
  if (has_byte_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->byte_size(), output);
  }

  // required uint32 num_tasks = 6;
  if (has_num_tasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_tasks(), output);
  }

  // required uint32 num_files = 7;
  if (has_num_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_files(), output);
  }

  // required bool damaged = 8;
  if (has_damaged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->damaged(), output);
  }

  // required float completion = 9;
  if (has_completion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->completion(), output);
  }

  // required uint32 type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->type(), output);
  }

  // required uint32 runtime = 11;
  if (has_runtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->runtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.Batch)
}

::google::protobuf::uint8* Batch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.Batch)
  // required uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // required uint32 batch_id = 2;
  if (has_batch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->batch_id(), target);
  }

  // required string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // required string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  // required uint64 byte_size = 5;
  if (has_byte_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->byte_size(), target);
  }

  // required uint32 num_tasks = 6;
  if (has_num_tasks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_tasks(), target);
  }

  // required uint32 num_files = 7;
  if (has_num_files()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_files(), target);
  }

  // required bool damaged = 8;
  if (has_damaged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->damaged(), target);
  }

  // required float completion = 9;
  if (has_completion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->completion(), target);
  }

  // required uint32 type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->type(), target);
  }

  // required uint32 runtime = 11;
  if (has_runtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->runtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Batch)
  return target;
}

int Batch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // required uint32 batch_id = 2;
    if (has_batch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_id());
    }

    // required string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required uint64 byte_size = 5;
    if (has_byte_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->byte_size());
    }

    // required uint32 num_tasks = 6;
    if (has_num_tasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_tasks());
    }

    // required uint32 num_files = 7;
    if (has_num_files()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_files());
    }

    // required bool damaged = 8;
    if (has_damaged()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float completion = 9;
    if (has_completion()) {
      total_size += 1 + 4;
    }

    // required uint32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 runtime = 11;
    if (has_runtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Batch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Batch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Batch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Batch::MergeFrom(const Batch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_batch_id()) {
      set_batch_id(from.batch_id());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_byte_size()) {
      set_byte_size(from.byte_size());
    }
    if (from.has_num_tasks()) {
      set_num_tasks(from.num_tasks());
    }
    if (from.has_num_files()) {
      set_num_files(from.num_files());
    }
    if (from.has_damaged()) {
      set_damaged(from.damaged());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_completion()) {
      set_completion(from.completion());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_runtime()) {
      set_runtime(from.runtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Batch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Batch::CopyFrom(const Batch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Batch::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void Batch::Swap(Batch* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(batch_id_, other->batch_id_);
    std::swap(path_, other->path_);
    std::swap(desc_, other->desc_);
    std::swap(byte_size_, other->byte_size_);
    std::swap(num_tasks_, other->num_tasks_);
    std::swap(num_files_, other->num_files_);
    std::swap(damaged_, other->damaged_);
    std::swap(completion_, other->completion_);
    std::swap(type_, other->type_);
    std::swap(runtime_, other->runtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Batch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Batch_descriptor_;
  metadata.reflection = Batch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskList::kBytesQueuedFieldNumber;
const int TaskList::kBytesReadyFieldNumber;
const int TaskList::kObjectIdFieldNumber;
const int TaskList::kBatchFieldNumber;
const int TaskList::kTasksFieldNumber;
#endif  // !_MSC_VER

TaskList::TaskList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.TaskList)
}

void TaskList::InitAsDefaultInstance() {
}

TaskList::TaskList(const TaskList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.TaskList)
}

void TaskList::SharedCtor() {
  _cached_size_ = 0;
  bytes_queued_ = GOOGLE_ULONGLONG(0);
  bytes_ready_ = GOOGLE_ULONGLONG(0);
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskList::~TaskList() {
  // @@protoc_insertion_point(destructor:data.TaskList)
  SharedDtor();
}

void TaskList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskList_descriptor_;
}

const TaskList& TaskList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

TaskList* TaskList::default_instance_ = NULL;

TaskList* TaskList::New() const {
  return new TaskList;
}

void TaskList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaskList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bytes_queued_, object_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  batch_.Clear();
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.TaskList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 bytes_queued = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_queued_)));
          set_has_bytes_queued();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bytes_ready;
        break;
      }

      // required uint64 bytes_ready = 2;
      case 2: {
        if (tag == 16) {
         parse_bytes_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_ready_)));
          set_has_bytes_ready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_object_id;
        break;
      }

      // required uint64 object_id = 3;
      case 3: {
        if (tag == 24) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_batch;
        break;
      }

      // repeated .data.Batch batch = 4;
      case 4: {
        if (tag == 34) {
         parse_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_batch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_batch;
        if (input->ExpectTag(42)) goto parse_tasks;
        break;
      }

      // repeated .data.TaskState tasks = 5;
      case 5: {
        if (tag == 42) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tasks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.TaskList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.TaskList)
  return false;
#undef DO_
}

void TaskList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.TaskList)
  // required uint64 bytes_queued = 1;
  if (has_bytes_queued()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->bytes_queued(), output);
  }

  // required uint64 bytes_ready = 2;
  if (has_bytes_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes_ready(), output);
  }

  // required uint64 object_id = 3;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->object_id(), output);
  }

  // repeated .data.Batch batch = 4;
  for (int i = 0; i < this->batch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->batch(i), output);
  }

  // repeated .data.TaskState tasks = 5;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.TaskList)
}

::google::protobuf::uint8* TaskList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.TaskList)
  // required uint64 bytes_queued = 1;
  if (has_bytes_queued()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->bytes_queued(), target);
  }

  // required uint64 bytes_ready = 2;
  if (has_bytes_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bytes_ready(), target);
  }

  // required uint64 object_id = 3;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->object_id(), target);
  }

  // repeated .data.Batch batch = 4;
  for (int i = 0; i < this->batch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->batch(i), target);
  }

  // repeated .data.TaskState tasks = 5;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.TaskList)
  return target;
}

int TaskList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 bytes_queued = 1;
    if (has_bytes_queued()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_queued());
    }

    // required uint64 bytes_ready = 2;
    if (has_bytes_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_ready());
    }

    // required uint64 object_id = 3;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }

  }
  // repeated .data.Batch batch = 4;
  total_size += 1 * this->batch_size();
  for (int i = 0; i < this->batch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->batch(i));
  }

  // repeated .data.TaskState tasks = 5;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskList::MergeFrom(const TaskList& from) {
  GOOGLE_CHECK_NE(&from, this);
  batch_.MergeFrom(from.batch_);
  tasks_.MergeFrom(from.tasks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bytes_queued()) {
      set_bytes_queued(from.bytes_queued());
    }
    if (from.has_bytes_ready()) {
      set_bytes_ready(from.bytes_ready());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskList::CopyFrom(const TaskList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->batch())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->tasks())) return false;
  return true;
}

void TaskList::Swap(TaskList* other) {
  if (other != this) {
    std::swap(bytes_queued_, other->bytes_queued_);
    std::swap(bytes_ready_, other->bytes_ready_);
    std::swap(object_id_, other->object_id_);
    batch_.Swap(&other->batch_);
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskList_descriptor_;
  metadata.reflection = TaskList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data

// @@protoc_insertion_point(global_scope)
