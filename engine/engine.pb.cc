// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "engine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace data {

namespace {

const ::google::protobuf::Descriptor* Account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Account_reflection_ = NULL;
const ::google::protobuf::Descriptor* File_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  File_reflection_ = NULL;
const ::google::protobuf::Descriptor* Download_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Download_reflection_ = NULL;
const ::google::protobuf::Descriptor* Batch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Batch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_engine_2eproto() {
  protobuf_AddDesc_engine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "engine.proto");
  GOOGLE_CHECK(file != NULL);
  Account_descriptor_ = file->message_type(0);
  static const int Account_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, secure_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, secure_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, general_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, general_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, max_connections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, enable_secure_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, enable_general_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, enable_pipelining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, enable_compression_),
  };
  Account_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Account_descriptor_,
      Account::default_instance_,
      Account_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Account));
  File_descriptor_ = file->message_type(1);
  static const int File_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, filepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, dataname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, is_binary_),
  };
  File_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      File_descriptor_,
      File::default_instance_,
      File_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(File));
  Download_descriptor_ = file->message_type(2);
  static const int Download_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, batch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, num_actions_ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, num_actions_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, article_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, enable_fill_),
  };
  Download_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Download_descriptor_,
      Download::default_instance_,
      Download_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Download, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Download));
  Batch_descriptor_ = file->message_type(3);
  static const int Batch_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, batch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, byte_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, num_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, num_slices_),
  };
  Batch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Batch_descriptor_,
      Batch::default_instance_,
      Batch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Batch));
  TaskList_descriptor_ = file->message_type(4);
  static const int TaskList_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskList, current_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskList, bytes_queued_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskList, bytes_ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskList, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskList, batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskList, download_),
  };
  TaskList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskList_descriptor_,
      TaskList::default_instance_,
      TaskList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_engine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Account_descriptor_, &Account::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    File_descriptor_, &File::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Download_descriptor_, &Download::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Batch_descriptor_, &Batch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskList_descriptor_, &TaskList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_engine_2eproto() {
  delete Account::default_instance_;
  delete Account_reflection_;
  delete File::default_instance_;
  delete File_reflection_;
  delete Download::default_instance_;
  delete Download_reflection_;
  delete Batch::default_instance_;
  delete Batch_reflection_;
  delete TaskList::default_instance_;
  delete TaskList_reflection_;
}

void protobuf_AddDesc_engine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014engine.proto\022\004data\"\242\002\n\007Account\022\n\n\002id\030\001"
    " \002(\r\022\014\n\004name\030\002 \002(\t\022\014\n\004user\030\003 \002(\t\022\014\n\004pass"
    "\030\004 \002(\t\022\023\n\013secure_host\030\005 \002(\t\022\023\n\013secure_po"
    "rt\030\006 \002(\r\022\024\n\014general_host\030\007 \002(\t\022\024\n\014genera"
    "l_port\030\010 \002(\r\022\027\n\017max_connections\030\t \002(\r\022\034\n"
    "\024enable_secure_server\030\n \002(\010\022\035\n\025enable_ge"
    "neral_server\030\013 \002(\010\022\031\n\021enable_pipelining\030"
    "\014 \002(\010\022\032\n\022enable_compression\030\r \002(\010\"O\n\004Fil"
    "e\022\020\n\010filename\030\001 \002(\t\022\020\n\010filepath\030\002 \002(\t\022\020\n"
    "\010dataname\030\003 \002(\t\022\021\n\tis_binary\030\004 \002(\010\"\360\001\n\010D"
    "ownload\022\022\n\naccount_id\030\001 \002(\r\022\020\n\010batch_id\030"
    "\002 \002(\r\022\017\n\007task_id\030\003 \002(\r\022\014\n\004desc\030\004 \002(\t\022\014\n\004"
    "path\030\005 \002(\t\022\014\n\004size\030\006 \002(\004\022\031\n\021num_actions_"
    "ready\030\007 \002(\r\022\031\n\021num_actions_total\030\010 \002(\r\022\017"
    "\n\007article\030\t \003(\t\022\r\n\005group\030\n \003(\t\022\030\n\004file\030\013"
    " \003(\0132\n.data.File\022\023\n\013enable_fill\030\014 \002(\010\"\203\001"
    "\n\005Batch\022\022\n\naccount_id\030\001 \002(\r\022\020\n\010batch_id\030"
    "\002 \002(\r\022\014\n\004path\030\003 \002(\t\022\014\n\004desc\030\004 \002(\t\022\021\n\tbyt"
    "e_size\030\005 \002(\004\022\021\n\tnum_tasks\030\006 \002(\r\022\022\n\nnum_s"
    "lices\030\007 \002(\r\"\247\001\n\010TaskList\022\022\n\ncurrent_id\030\001"
    " \002(\r\022\024\n\014bytes_queued\030\002 \002(\004\022\023\n\013bytes_read"
    "y\030\003 \002(\004\022\036\n\007account\030\004 \003(\0132\r.data.Account\022"
    "\032\n\005batch\030\005 \003(\0132\013.data.Batch\022 \n\010download\030"
    "\006 \003(\0132\016.data.Download", 941);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "engine.proto", &protobuf_RegisterTypes);
  Account::default_instance_ = new Account();
  File::default_instance_ = new File();
  Download::default_instance_ = new Download();
  Batch::default_instance_ = new Batch();
  TaskList::default_instance_ = new TaskList();
  Account::default_instance_->InitAsDefaultInstance();
  File::default_instance_->InitAsDefaultInstance();
  Download::default_instance_->InitAsDefaultInstance();
  Batch::default_instance_->InitAsDefaultInstance();
  TaskList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_engine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_engine_2eproto {
  StaticDescriptorInitializer_engine_2eproto() {
    protobuf_AddDesc_engine_2eproto();
  }
} static_descriptor_initializer_engine_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Account::kIdFieldNumber;
const int Account::kNameFieldNumber;
const int Account::kUserFieldNumber;
const int Account::kPassFieldNumber;
const int Account::kSecureHostFieldNumber;
const int Account::kSecurePortFieldNumber;
const int Account::kGeneralHostFieldNumber;
const int Account::kGeneralPortFieldNumber;
const int Account::kMaxConnectionsFieldNumber;
const int Account::kEnableSecureServerFieldNumber;
const int Account::kEnableGeneralServerFieldNumber;
const int Account::kEnablePipeliningFieldNumber;
const int Account::kEnableCompressionFieldNumber;
#endif  // !_MSC_VER

Account::Account()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Account)
}

void Account::InitAsDefaultInstance() {
}

Account::Account(const Account& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.Account)
}

void Account::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secure_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secure_port_ = 0u;
  general_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  general_port_ = 0u;
  max_connections_ = 0u;
  enable_secure_server_ = false;
  enable_general_server_ = false;
  enable_pipelining_ = false;
  enable_compression_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:data.Account)
  SharedDtor();
}

void Account::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_;
  }
  if (secure_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secure_host_;
  }
  if (general_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete general_host_;
  }
  if (this != default_instance_) {
  }
}

void Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Account_descriptor_;
}

const Account& Account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

Account* Account::default_instance_ = NULL;

Account* Account::New() const {
  return new Account;
}

void Account::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Account*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, secure_port_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_->clear();
      }
    }
    if (has_pass()) {
      if (pass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pass_->clear();
      }
    }
    if (has_secure_host()) {
      if (secure_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secure_host_->clear();
      }
    }
    if (has_general_host()) {
      if (general_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        general_host_->clear();
      }
    }
    general_port_ = 0u;
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(max_connections_, enable_compression_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.Account)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // required string user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pass;
        break;
      }

      // required string pass = 4;
      case 4: {
        if (tag == 34) {
         parse_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass().data(), this->pass().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pass");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_secure_host;
        break;
      }

      // required string secure_host = 5;
      case 5: {
        if (tag == 42) {
         parse_secure_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secure_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secure_host().data(), this->secure_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secure_host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_secure_port;
        break;
      }

      // required uint32 secure_port = 6;
      case 6: {
        if (tag == 48) {
         parse_secure_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secure_port_)));
          set_has_secure_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_general_host;
        break;
      }

      // required string general_host = 7;
      case 7: {
        if (tag == 58) {
         parse_general_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_general_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->general_host().data(), this->general_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "general_host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_general_port;
        break;
      }

      // required uint32 general_port = 8;
      case 8: {
        if (tag == 64) {
         parse_general_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &general_port_)));
          set_has_general_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_connections;
        break;
      }

      // required uint32 max_connections = 9;
      case 9: {
        if (tag == 72) {
         parse_max_connections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_connections_)));
          set_has_max_connections();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_enable_secure_server;
        break;
      }

      // required bool enable_secure_server = 10;
      case 10: {
        if (tag == 80) {
         parse_enable_secure_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_secure_server_)));
          set_has_enable_secure_server();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_enable_general_server;
        break;
      }

      // required bool enable_general_server = 11;
      case 11: {
        if (tag == 88) {
         parse_enable_general_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_general_server_)));
          set_has_enable_general_server();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_enable_pipelining;
        break;
      }

      // required bool enable_pipelining = 12;
      case 12: {
        if (tag == 96) {
         parse_enable_pipelining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_pipelining_)));
          set_has_enable_pipelining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_enable_compression;
        break;
      }

      // required bool enable_compression = 13;
      case 13: {
        if (tag == 104) {
         parse_enable_compression:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_compression_)));
          set_has_enable_compression();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.Account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.Account)
  return false;
#undef DO_
}

void Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.Account)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user(), output);
  }

  // required string pass = 4;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pass(), output);
  }

  // required string secure_host = 5;
  if (has_secure_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secure_host().data(), this->secure_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secure_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->secure_host(), output);
  }

  // required uint32 secure_port = 6;
  if (has_secure_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->secure_port(), output);
  }

  // required string general_host = 7;
  if (has_general_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->general_host().data(), this->general_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "general_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->general_host(), output);
  }

  // required uint32 general_port = 8;
  if (has_general_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->general_port(), output);
  }

  // required uint32 max_connections = 9;
  if (has_max_connections()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->max_connections(), output);
  }

  // required bool enable_secure_server = 10;
  if (has_enable_secure_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->enable_secure_server(), output);
  }

  // required bool enable_general_server = 11;
  if (has_enable_general_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->enable_general_server(), output);
  }

  // required bool enable_pipelining = 12;
  if (has_enable_pipelining()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->enable_pipelining(), output);
  }

  // required bool enable_compression = 13;
  if (has_enable_compression()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->enable_compression(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.Account)
}

::google::protobuf::uint8* Account::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.Account)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // required string pass = 4;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pass(), target);
  }

  // required string secure_host = 5;
  if (has_secure_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secure_host().data(), this->secure_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secure_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->secure_host(), target);
  }

  // required uint32 secure_port = 6;
  if (has_secure_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->secure_port(), target);
  }

  // required string general_host = 7;
  if (has_general_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->general_host().data(), this->general_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "general_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->general_host(), target);
  }

  // required uint32 general_port = 8;
  if (has_general_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->general_port(), target);
  }

  // required uint32 max_connections = 9;
  if (has_max_connections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->max_connections(), target);
  }

  // required bool enable_secure_server = 10;
  if (has_enable_secure_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->enable_secure_server(), target);
  }

  // required bool enable_general_server = 11;
  if (has_enable_general_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->enable_general_server(), target);
  }

  // required bool enable_pipelining = 12;
  if (has_enable_pipelining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->enable_pipelining(), target);
  }

  // required bool enable_compression = 13;
  if (has_enable_compression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->enable_compression(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Account)
  return target;
}

int Account::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string pass = 4;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass());
    }

    // required string secure_host = 5;
    if (has_secure_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secure_host());
    }

    // required uint32 secure_port = 6;
    if (has_secure_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secure_port());
    }

    // required string general_host = 7;
    if (has_general_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->general_host());
    }

    // required uint32 general_port = 8;
    if (has_general_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->general_port());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 max_connections = 9;
    if (has_max_connections()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_connections());
    }

    // required bool enable_secure_server = 10;
    if (has_enable_secure_server()) {
      total_size += 1 + 1;
    }

    // required bool enable_general_server = 11;
    if (has_enable_general_server()) {
      total_size += 1 + 1;
    }

    // required bool enable_pipelining = 12;
    if (has_enable_pipelining()) {
      total_size += 1 + 1;
    }

    // required bool enable_compression = 13;
    if (has_enable_compression()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Account* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Account*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_secure_host()) {
      set_secure_host(from.secure_host());
    }
    if (from.has_secure_port()) {
      set_secure_port(from.secure_port());
    }
    if (from.has_general_host()) {
      set_general_host(from.general_host());
    }
    if (from.has_general_port()) {
      set_general_port(from.general_port());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_connections()) {
      set_max_connections(from.max_connections());
    }
    if (from.has_enable_secure_server()) {
      set_enable_secure_server(from.enable_secure_server());
    }
    if (from.has_enable_general_server()) {
      set_enable_general_server(from.enable_general_server());
    }
    if (from.has_enable_pipelining()) {
      set_enable_pipelining(from.enable_pipelining());
    }
    if (from.has_enable_compression()) {
      set_enable_compression(from.enable_compression());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Account::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void Account::Swap(Account* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(user_, other->user_);
    std::swap(pass_, other->pass_);
    std::swap(secure_host_, other->secure_host_);
    std::swap(secure_port_, other->secure_port_);
    std::swap(general_host_, other->general_host_);
    std::swap(general_port_, other->general_port_);
    std::swap(max_connections_, other->max_connections_);
    std::swap(enable_secure_server_, other->enable_secure_server_);
    std::swap(enable_general_server_, other->enable_general_server_);
    std::swap(enable_pipelining_, other->enable_pipelining_);
    std::swap(enable_compression_, other->enable_compression_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Account_descriptor_;
  metadata.reflection = Account_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int File::kFilenameFieldNumber;
const int File::kFilepathFieldNumber;
const int File::kDatanameFieldNumber;
const int File::kIsBinaryFieldNumber;
#endif  // !_MSC_VER

File::File()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.File)
}

void File::InitAsDefaultInstance() {
}

File::File(const File& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.File)
}

void File::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_binary_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

File::~File() {
  // @@protoc_insertion_point(destructor:data.File)
  SharedDtor();
}

void File::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filepath_;
  }
  if (dataname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dataname_;
  }
  if (this != default_instance_) {
  }
}

void File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* File::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return File_descriptor_;
}

const File& File::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

File* File::default_instance_ = NULL;

File* File::New() const {
  return new File;
}

void File::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filepath_->clear();
      }
    }
    if (has_dataname()) {
      if (dataname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dataname_->clear();
      }
    }
    is_binary_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filepath;
        break;
      }

      // required string filepath = 2;
      case 2: {
        if (tag == 18) {
         parse_filepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dataname;
        break;
      }

      // required string dataname = 3;
      case 3: {
        if (tag == 26) {
         parse_dataname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataname().data(), this->dataname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dataname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_binary;
        break;
      }

      // required bool is_binary = 4;
      case 4: {
        if (tag == 32) {
         parse_is_binary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_binary_)));
          set_has_is_binary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.File)
  return false;
#undef DO_
}

void File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.File)
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // required string filepath = 2;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filepath(), output);
  }

  // required string dataname = 3;
  if (has_dataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataname().data(), this->dataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dataname(), output);
  }

  // required bool is_binary = 4;
  if (has_is_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_binary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.File)
}

::google::protobuf::uint8* File::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.File)
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // required string filepath = 2;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filepath(), target);
  }

  // required string dataname = 3;
  if (has_dataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataname().data(), this->dataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dataname(), target);
  }

  // required bool is_binary = 4;
  if (has_is_binary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_binary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.File)
  return target;
}

int File::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required string filepath = 2;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

    // required string dataname = 3;
    if (has_dataname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataname());
    }

    // required bool is_binary = 4;
    if (has_is_binary()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void File::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const File* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const File*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void File::MergeFrom(const File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
    if (from.has_dataname()) {
      set_dataname(from.dataname());
    }
    if (from.has_is_binary()) {
      set_is_binary(from.is_binary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void File::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File::CopyFrom(const File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void File::Swap(File* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(filepath_, other->filepath_);
    std::swap(dataname_, other->dataname_);
    std::swap(is_binary_, other->is_binary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata File::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = File_descriptor_;
  metadata.reflection = File_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Download::kAccountIdFieldNumber;
const int Download::kBatchIdFieldNumber;
const int Download::kTaskIdFieldNumber;
const int Download::kDescFieldNumber;
const int Download::kPathFieldNumber;
const int Download::kSizeFieldNumber;
const int Download::kNumActionsReadyFieldNumber;
const int Download::kNumActionsTotalFieldNumber;
const int Download::kArticleFieldNumber;
const int Download::kGroupFieldNumber;
const int Download::kFileFieldNumber;
const int Download::kEnableFillFieldNumber;
#endif  // !_MSC_VER

Download::Download()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Download)
}

void Download::InitAsDefaultInstance() {
}

Download::Download(const Download& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.Download)
}

void Download::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = 0u;
  batch_id_ = 0u;
  task_id_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_ULONGLONG(0);
  num_actions_ready_ = 0u;
  num_actions_total_ = 0u;
  enable_fill_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Download::~Download() {
  // @@protoc_insertion_point(destructor:data.Download)
  SharedDtor();
}

void Download::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void Download::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Download::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Download_descriptor_;
}

const Download& Download::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

Download* Download::default_instance_ = NULL;

Download* Download::New() const {
  return new Download;
}

void Download::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Download*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(account_id_, batch_id_);
    ZR_(task_id_, size_);
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    num_actions_total_ = 0u;
  }
  enable_fill_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  article_.Clear();
  group_.Clear();
  file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Download::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.Download)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_batch_id;
        break;
      }

      // required uint32 batch_id = 2;
      case 2: {
        if (tag == 16) {
         parse_batch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_id_)));
          set_has_batch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_task_id;
        break;
      }

      // required uint32 task_id = 3;
      case 3: {
        if (tag == 24) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }

      // required string desc = 4;
      case 4: {
        if (tag == 34) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_path;
        break;
      }

      // required string path = 5;
      case 5: {
        if (tag == 42) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_size;
        break;
      }

      // required uint64 size = 6;
      case 6: {
        if (tag == 48) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_actions_ready;
        break;
      }

      // required uint32 num_actions_ready = 7;
      case 7: {
        if (tag == 56) {
         parse_num_actions_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_actions_ready_)));
          set_has_num_actions_ready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_actions_total;
        break;
      }

      // required uint32 num_actions_total = 8;
      case 8: {
        if (tag == 64) {
         parse_num_actions_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_actions_total_)));
          set_has_num_actions_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_article;
        break;
      }

      // repeated string article = 9;
      case 9: {
        if (tag == 74) {
         parse_article:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_article()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->article(this->article_size() - 1).data(),
            this->article(this->article_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "article");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_article;
        if (input->ExpectTag(82)) goto parse_group;
        break;
      }

      // repeated string group = 10;
      case 10: {
        if (tag == 82) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group(this->group_size() - 1).data(),
            this->group(this->group_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_group;
        if (input->ExpectTag(90)) goto parse_file;
        break;
      }

      // repeated .data.File file = 11;
      case 11: {
        if (tag == 90) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_file;
        if (input->ExpectTag(96)) goto parse_enable_fill;
        break;
      }

      // required bool enable_fill = 12;
      case 12: {
        if (tag == 96) {
         parse_enable_fill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_fill_)));
          set_has_enable_fill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.Download)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.Download)
  return false;
#undef DO_
}

void Download::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.Download)
  // required uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // required uint32 batch_id = 2;
  if (has_batch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->batch_id(), output);
  }

  // required uint32 task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->task_id(), output);
  }

  // required string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->desc(), output);
  }

  // required string path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->path(), output);
  }

  // required uint64 size = 6;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->size(), output);
  }

  // required uint32 num_actions_ready = 7;
  if (has_num_actions_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_actions_ready(), output);
  }

  // required uint32 num_actions_total = 8;
  if (has_num_actions_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_actions_total(), output);
  }

  // repeated string article = 9;
  for (int i = 0; i < this->article_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->article(i).data(), this->article(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "article");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->article(i), output);
  }

  // repeated string group = 10;
  for (int i = 0; i < this->group_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->group(i).data(), this->group(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "group");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->group(i), output);
  }

  // repeated .data.File file = 11;
  for (int i = 0; i < this->file_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->file(i), output);
  }

  // required bool enable_fill = 12;
  if (has_enable_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->enable_fill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.Download)
}

::google::protobuf::uint8* Download::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.Download)
  // required uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // required uint32 batch_id = 2;
  if (has_batch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->batch_id(), target);
  }

  // required uint32 task_id = 3;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->task_id(), target);
  }

  // required string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  // required string path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->path(), target);
  }

  // required uint64 size = 6;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->size(), target);
  }

  // required uint32 num_actions_ready = 7;
  if (has_num_actions_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_actions_ready(), target);
  }

  // required uint32 num_actions_total = 8;
  if (has_num_actions_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_actions_total(), target);
  }

  // repeated string article = 9;
  for (int i = 0; i < this->article_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->article(i).data(), this->article(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "article");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->article(i), target);
  }

  // repeated string group = 10;
  for (int i = 0; i < this->group_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group(i).data(), this->group(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->group(i), target);
  }

  // repeated .data.File file = 11;
  for (int i = 0; i < this->file_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->file(i), target);
  }

  // required bool enable_fill = 12;
  if (has_enable_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->enable_fill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Download)
  return target;
}

int Download::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // required uint32 batch_id = 2;
    if (has_batch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_id());
    }

    // required uint32 task_id = 3;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // required string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required string path = 5;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required uint64 size = 6;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // required uint32 num_actions_ready = 7;
    if (has_num_actions_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_actions_ready());
    }

    // required uint32 num_actions_total = 8;
    if (has_num_actions_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_actions_total());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // required bool enable_fill = 12;
    if (has_enable_fill()) {
      total_size += 1 + 1;
    }

  }
  // repeated string article = 9;
  total_size += 1 * this->article_size();
  for (int i = 0; i < this->article_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->article(i));
  }

  // repeated string group = 10;
  total_size += 1 * this->group_size();
  for (int i = 0; i < this->group_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->group(i));
  }

  // repeated .data.File file = 11;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Download::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Download* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Download*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Download::MergeFrom(const Download& from) {
  GOOGLE_CHECK_NE(&from, this);
  article_.MergeFrom(from.article_);
  group_.MergeFrom(from.group_);
  file_.MergeFrom(from.file_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_batch_id()) {
      set_batch_id(from.batch_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_num_actions_ready()) {
      set_num_actions_ready(from.num_actions_ready());
    }
    if (from.has_num_actions_total()) {
      set_num_actions_total(from.num_actions_total());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_enable_fill()) {
      set_enable_fill(from.enable_fill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Download::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Download::CopyFrom(const Download& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Download::IsInitialized() const {
  if ((_has_bits_[0] & 0x000008ff) != 0x000008ff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->file())) return false;
  return true;
}

void Download::Swap(Download* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(batch_id_, other->batch_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(desc_, other->desc_);
    std::swap(path_, other->path_);
    std::swap(size_, other->size_);
    std::swap(num_actions_ready_, other->num_actions_ready_);
    std::swap(num_actions_total_, other->num_actions_total_);
    article_.Swap(&other->article_);
    group_.Swap(&other->group_);
    file_.Swap(&other->file_);
    std::swap(enable_fill_, other->enable_fill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Download::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Download_descriptor_;
  metadata.reflection = Download_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Batch::kAccountIdFieldNumber;
const int Batch::kBatchIdFieldNumber;
const int Batch::kPathFieldNumber;
const int Batch::kDescFieldNumber;
const int Batch::kByteSizeFieldNumber;
const int Batch::kNumTasksFieldNumber;
const int Batch::kNumSlicesFieldNumber;
#endif  // !_MSC_VER

Batch::Batch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Batch)
}

void Batch::InitAsDefaultInstance() {
}

Batch::Batch(const Batch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.Batch)
}

void Batch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = 0u;
  batch_id_ = 0u;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  byte_size_ = GOOGLE_ULONGLONG(0);
  num_tasks_ = 0u;
  num_slices_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Batch::~Batch() {
  // @@protoc_insertion_point(destructor:data.Batch)
  SharedDtor();
}

void Batch::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void Batch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Batch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Batch_descriptor_;
}

const Batch& Batch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

Batch* Batch::default_instance_ = NULL;

Batch* Batch::New() const {
  return new Batch;
}

void Batch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Batch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(account_id_, batch_id_);
    ZR_(byte_size_, num_slices_);
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Batch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.Batch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_batch_id;
        break;
      }

      // required uint32 batch_id = 2;
      case 2: {
        if (tag == 16) {
         parse_batch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_id_)));
          set_has_batch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // required string path = 3;
      case 3: {
        if (tag == 26) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }

      // required string desc = 4;
      case 4: {
        if (tag == 34) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_byte_size;
        break;
      }

      // required uint64 byte_size = 5;
      case 5: {
        if (tag == 40) {
         parse_byte_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &byte_size_)));
          set_has_byte_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_tasks;
        break;
      }

      // required uint32 num_tasks = 6;
      case 6: {
        if (tag == 48) {
         parse_num_tasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_tasks_)));
          set_has_num_tasks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_slices;
        break;
      }

      // required uint32 num_slices = 7;
      case 7: {
        if (tag == 56) {
         parse_num_slices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_slices_)));
          set_has_num_slices();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.Batch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.Batch)
  return false;
#undef DO_
}

void Batch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.Batch)
  // required uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // required uint32 batch_id = 2;
  if (has_batch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->batch_id(), output);
  }

  // required string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->path(), output);
  }

  // required string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->desc(), output);
  }

  // required uint64 byte_size = 5;
  if (has_byte_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->byte_size(), output);
  }

  // required uint32 num_tasks = 6;
  if (has_num_tasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_tasks(), output);
  }

  // required uint32 num_slices = 7;
  if (has_num_slices()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_slices(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.Batch)
}

::google::protobuf::uint8* Batch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.Batch)
  // required uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // required uint32 batch_id = 2;
  if (has_batch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->batch_id(), target);
  }

  // required string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // required string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  // required uint64 byte_size = 5;
  if (has_byte_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->byte_size(), target);
  }

  // required uint32 num_tasks = 6;
  if (has_num_tasks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_tasks(), target);
  }

  // required uint32 num_slices = 7;
  if (has_num_slices()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_slices(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Batch)
  return target;
}

int Batch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // required uint32 batch_id = 2;
    if (has_batch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_id());
    }

    // required string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required uint64 byte_size = 5;
    if (has_byte_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->byte_size());
    }

    // required uint32 num_tasks = 6;
    if (has_num_tasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_tasks());
    }

    // required uint32 num_slices = 7;
    if (has_num_slices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_slices());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Batch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Batch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Batch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Batch::MergeFrom(const Batch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_batch_id()) {
      set_batch_id(from.batch_id());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_byte_size()) {
      set_byte_size(from.byte_size());
    }
    if (from.has_num_tasks()) {
      set_num_tasks(from.num_tasks());
    }
    if (from.has_num_slices()) {
      set_num_slices(from.num_slices());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Batch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Batch::CopyFrom(const Batch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Batch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Batch::Swap(Batch* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(batch_id_, other->batch_id_);
    std::swap(path_, other->path_);
    std::swap(desc_, other->desc_);
    std::swap(byte_size_, other->byte_size_);
    std::swap(num_tasks_, other->num_tasks_);
    std::swap(num_slices_, other->num_slices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Batch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Batch_descriptor_;
  metadata.reflection = Batch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskList::kCurrentIdFieldNumber;
const int TaskList::kBytesQueuedFieldNumber;
const int TaskList::kBytesReadyFieldNumber;
const int TaskList::kAccountFieldNumber;
const int TaskList::kBatchFieldNumber;
const int TaskList::kDownloadFieldNumber;
#endif  // !_MSC_VER

TaskList::TaskList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.TaskList)
}

void TaskList::InitAsDefaultInstance() {
}

TaskList::TaskList(const TaskList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.TaskList)
}

void TaskList::SharedCtor() {
  _cached_size_ = 0;
  current_id_ = 0u;
  bytes_queued_ = GOOGLE_ULONGLONG(0);
  bytes_ready_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskList::~TaskList() {
  // @@protoc_insertion_point(destructor:data.TaskList)
  SharedDtor();
}

void TaskList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskList_descriptor_;
}

const TaskList& TaskList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

TaskList* TaskList::default_instance_ = NULL;

TaskList* TaskList::New() const {
  return new TaskList;
}

void TaskList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaskList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(bytes_queued_, bytes_ready_);
    current_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  account_.Clear();
  batch_.Clear();
  download_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.TaskList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 current_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_id_)));
          set_has_current_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bytes_queued;
        break;
      }

      // required uint64 bytes_queued = 2;
      case 2: {
        if (tag == 16) {
         parse_bytes_queued:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_queued_)));
          set_has_bytes_queued();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bytes_ready;
        break;
      }

      // required uint64 bytes_ready = 3;
      case 3: {
        if (tag == 24) {
         parse_bytes_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_ready_)));
          set_has_bytes_ready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // repeated .data.Account account = 4;
      case 4: {
        if (tag == 34) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_account;
        if (input->ExpectTag(42)) goto parse_batch;
        break;
      }

      // repeated .data.Batch batch = 5;
      case 5: {
        if (tag == 42) {
         parse_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_batch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_batch;
        if (input->ExpectTag(50)) goto parse_download;
        break;
      }

      // repeated .data.Download download = 6;
      case 6: {
        if (tag == 50) {
         parse_download:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_download()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_download;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.TaskList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.TaskList)
  return false;
#undef DO_
}

void TaskList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.TaskList)
  // required uint32 current_id = 1;
  if (has_current_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_id(), output);
  }

  // required uint64 bytes_queued = 2;
  if (has_bytes_queued()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes_queued(), output);
  }

  // required uint64 bytes_ready = 3;
  if (has_bytes_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bytes_ready(), output);
  }

  // repeated .data.Account account = 4;
  for (int i = 0; i < this->account_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->account(i), output);
  }

  // repeated .data.Batch batch = 5;
  for (int i = 0; i < this->batch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->batch(i), output);
  }

  // repeated .data.Download download = 6;
  for (int i = 0; i < this->download_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->download(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.TaskList)
}

::google::protobuf::uint8* TaskList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.TaskList)
  // required uint32 current_id = 1;
  if (has_current_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->current_id(), target);
  }

  // required uint64 bytes_queued = 2;
  if (has_bytes_queued()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bytes_queued(), target);
  }

  // required uint64 bytes_ready = 3;
  if (has_bytes_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bytes_ready(), target);
  }

  // repeated .data.Account account = 4;
  for (int i = 0; i < this->account_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->account(i), target);
  }

  // repeated .data.Batch batch = 5;
  for (int i = 0; i < this->batch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->batch(i), target);
  }

  // repeated .data.Download download = 6;
  for (int i = 0; i < this->download_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->download(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.TaskList)
  return target;
}

int TaskList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 current_id = 1;
    if (has_current_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_id());
    }

    // required uint64 bytes_queued = 2;
    if (has_bytes_queued()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_queued());
    }

    // required uint64 bytes_ready = 3;
    if (has_bytes_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_ready());
    }

  }
  // repeated .data.Account account = 4;
  total_size += 1 * this->account_size();
  for (int i = 0; i < this->account_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->account(i));
  }

  // repeated .data.Batch batch = 5;
  total_size += 1 * this->batch_size();
  for (int i = 0; i < this->batch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->batch(i));
  }

  // repeated .data.Download download = 6;
  total_size += 1 * this->download_size();
  for (int i = 0; i < this->download_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->download(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskList::MergeFrom(const TaskList& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_.MergeFrom(from.account_);
  batch_.MergeFrom(from.batch_);
  download_.MergeFrom(from.download_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_id()) {
      set_current_id(from.current_id());
    }
    if (from.has_bytes_queued()) {
      set_bytes_queued(from.bytes_queued());
    }
    if (from.has_bytes_ready()) {
      set_bytes_ready(from.bytes_ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskList::CopyFrom(const TaskList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->account())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->batch())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->download())) return false;
  return true;
}

void TaskList::Swap(TaskList* other) {
  if (other != this) {
    std::swap(current_id_, other->current_id_);
    std::swap(bytes_queued_, other->bytes_queued_);
    std::swap(bytes_ready_, other->bytes_ready_);
    account_.Swap(&other->account_);
    batch_.Swap(&other->batch_);
    download_.Swap(&other->download_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskList_descriptor_;
  metadata.reflection = TaskList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data

// @@protoc_insertion_point(global_scope)
