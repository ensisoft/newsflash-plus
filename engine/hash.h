// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#pragma once

#include <limits>
#include <cstddef>

namespace newsflash
{
    // hashing code ripped off from boost TR1
    template<typename T>
    class hash
    {
    public:
        hash() : seed_(0) {}

        inline void add(const T& val)
        {
            seed_ ^= hash_value_signed(val) + 0x9e3779b9 + (seed_<<6) + (seed_>>2);
        }
        inline std::size_t result() const
        {
            return seed_;
        }
    private:
        std::size_t hash_value_signed(const T& val) const
        {
            const int size_t_bits = std::numeric_limits<std::size_t>::digits;
            const int length = (std::numeric_limits<T>::digits - 1) / size_t_bits;
    
            std::size_t seed = 0;
            T positive = val < 0 ? -1 - val : val;

            for(unsigned int i = length * size_t_bits; i > 0; i -= size_t_bits)
            {
                seed ^= (std::size_t) (positive >> i) + (seed<<6) + (seed>>2);
            }
            seed ^= (std::size_t) val + (seed<<6) + (seed>>2);
            return seed;            
        }
        std::size_t seed_;
    };    

} // newsflash
